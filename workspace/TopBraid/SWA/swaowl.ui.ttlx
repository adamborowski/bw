# baseURI: http://topbraid.org/swaowl
# imports: http://topbraid.org/swa

# c14n-version: 3
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix css: <http://uispin.org/css#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix html: <http://uispin.org/html#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix search: <http://topbraid.org/search#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
arg:keyword
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:list
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
swa:OWLClassLabel
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The resource to display."^^xsd:string ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= isIRI(?resource) }\">
        <swa:OWLClassLink arg:resource=\"{= ?resource }\"/>
    </ui:if>
    <ui:else let:oneOf=\"{= spl:object(?resource, owl:oneOf) }\">
        <ui:if ui:condition=\"{= bound(?oneOf) }\">{<swa:RDFListLabels arg:list=\"{= ?oneOf }\"/>}</ui:if>
        <ui:else let:compl=\"{= spl:object(?resource, owl:complementOf) }\" let:inter=\"{= spl:object(?resource, owl:intersectionOf) }\" let:union=\"{= spl:object(?resource, owl:unionOf) }\" let:xunion=\"{= spl:object(?resource, owl:disjointUnionOf) }\">(<ui:if ui:condition=\"{= bound(?compl) }\">
                <span class=\"swa-keyword\">not&nbsp;</span>
                <swa:Label arg:node=\"{= ?compl }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?inter) }\">
                <swa:OWLOperandsList arg:keyword=\"and\" arg:list=\"{= ?inter }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?union) }\">
                <swa:OWLOperandsList arg:keyword=\"or\" arg:list=\"{= ?union }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= bound(?xunion) }\">
                <swa:OWLOperandsList arg:keyword=\"xor\" arg:list=\"{= ?xunion }\"/>
            </ui:if>
            <ui:if ui:condition=\"{= spl:hasValue(?resource, owl:onProperty) }\">
                <swa:OWLRestrictionLabel arg:resource=\"{= ?resource }\"/>
            </ui:if>)</ui:else>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "OWL class label"^^xsd:string ;
  rdfs:subClassOf swa:OWLElements ;
.
swa:OWLClassLink
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class to display the link to."^^xsd:string ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:uid=\"{= ui:uniqueId() }\">
    <ui:group let:link=\"{= swa:createLink(?resource, ?uid) }\">
        <ui:if ui:condition=\"{= bound(?link) }\">
            <a class=\"swa-link\" href=\"javascript:void(0)\" id=\"{= ?uid }\" onclick=\"{= ?link }\">{= ui:label(?resource) }</a>
        </ui:if>
        <ui:else>{= ui:label(?resource) }</ui:else>
    </ui:group>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment "Different from swa:Link to avoid infinite recursion."^^xsd:string ;
  rdfs:label "OWL class link"^^xsd:string ;
  rdfs:subClassOf swa:OWLElements ;
.
swa:OWLElements
  rdf:type ui:NodeClass ;
  ui:abstract "true"^^xsd:boolean ;
  rdfs:comment "Abstract base class for SWP elements to handle OWL constructs."^^xsd:string ;
  rdfs:label "OWLElements"^^xsd:string ;
  rdfs:subClassOf swa:Elements ;
.
swa:OWLOperandsList
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:keyword ;
      spl:valueType xsd:string ;
      rdfs:comment "The keyword between the operands, e.g. \"or\"."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType rdf:List ;
      rdfs:comment "The rdf:List of operands."^^xsd:string ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:rest=\"{= spl:object(?list, rdf:rest) }\">
    <swa:OWLClassLabel arg:resource=\"{= spl:object(?list, rdf:first) }\"/>
    <br/>&nbsp;&nbsp;<span class=\"swa-keyword\">&nbsp;{= ?keyword }&nbsp;</span>
    <ui:if ui:condition=\"{= spl:hasValue(?rest, rdf:rest, rdf:nil) }\">
        <swa:OWLClassLabel arg:resource=\"{= spl:object(?rest, rdf:first) }\"/>
    </ui:if>
    <ui:else>
        <swa:OWLOperandsList arg:keyword=\"{= ?keyword }\" arg:list=\"{= ?rest }\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "OWLOperands list"^^xsd:string ;
  rdfs:subClassOf swa:OWLElements ;
.
swa:OWLRestrictionLabel
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:resource ;
      spl:valueType owl:Restriction ;
      rdfs:comment "The restriction to display."^^xsd:string ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:allValuesFrom=\"{= spl:object(?resource, owl:allValuesFrom) }\" let:exactly=\"{= spl:object(?resource, owl:cardinality) }\" let:hasValue=\"{= spl:object(?resource, owl:hasValue) }\" let:max=\"{= spl:object(?resource, owl:maxCardinality) }\" let:maxQ=\"{= spl:object(?resource, owl:maxQualifiedCardinality) }\" let:min=\"{= spl:object(?resource, owl:minCardinality) }\" let:minQ=\"{= spl:object(?resource, owl:minQualifiedCardinality) }\" let:q=\"{= spl:object(?resource, owl:qualifiedCardinality) }\" let:someValuesFrom=\"{= spl:object(?resource, owl:someValuesFrom) }\">
    <swa:Label arg:node=\"{= spl:object(?resource, owl:onProperty) }\"/>
    <ui:if ui:condition=\"{= bound(?allValuesFrom) }\">
        <span class=\"swa-keyword\">&nbsp;only&nbsp;</span>
        <swa:OWLClassLabel arg:resource=\"{= ?allValuesFrom }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?someValuesFrom) }\">
        <span class=\"swa-keyword\">&nbsp;some&nbsp;</span>
        <swa:OWLClassLabel arg:resource=\"{= ?someValuesFrom }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?hasValue) }\">
        <span class=\"swa-keyword\">&nbsp;value&nbsp;</span>
        <swa:Label arg:node=\"{= ?hasValue }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?max) }\">
        <span class=\"swa-keyword\">&nbsp;max&nbsp;</span>
        <swa:Label arg:node=\"{= ?max }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?min) }\">
        <span class=\"swa-keyword\">&nbsp;min&nbsp;</span>
        <swa:Label arg:node=\"{= ?min }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?exactly) }\">
        <span class=\"swa-keyword\">&nbsp;exactly&nbsp;</span>
        <swa:Label arg:node=\"{= ?exactly }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?maxQ) }\">
        <span class=\"swa-keyword\">&nbsp;max&nbsp;</span>
        <swa:Label arg:node=\"{= ?maxQ }\"/>&nbsp;<swa:OWLClassLabel arg:resource=\"{= spl:object(?resource, owl:onClass) }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?minQ) }\">
        <span class=\"swa-keyword\">&nbsp;min&nbsp;</span>
        <swa:Label arg:node=\"{= ?minQ }\"/>&nbsp;<swa:OWLClassLabel arg:resource=\"{= spl:object(?resource, owl:onClass) }\"/>
    </ui:if>
    <ui:if ui:condition=\"{= bound(?q) }\">
        <span class=\"swa-keyword\">&nbsp;exactly&nbsp;</span>
        <swa:Label arg:node=\"{= ?q }\"/>&nbsp;<swa:OWLClassLabel arg:resource=\"{= spl:object(?resource, owl:onClass) }\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "OWL restriction label"^^xsd:string ;
  rdfs:subClassOf swa:OWLElements ;
.
swa:RDFListLabels
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:list ;
      spl:valueType rdf:List ;
      rdfs:comment "The rdf:List to render"^^xsd:string ;
    ] ;
  ui:private "true"^^xsd:boolean ;
  ui:prototype """
<ui:group let:rest=\"{= spl:object(?list, rdf:rest) }\">
    <swa:Label arg:node=\"{= spl:object(?list, rdf:first) }\"/>
    <ui:if ui:condition=\"{= spl:hasValue(?rest, rdf:rest) }\">,&nbsp;<swa:RDFListLabels arg:list=\"{= ?rest }\"/>
    </ui:if>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "RDFList labels"^^xsd:string ;
  rdfs:subClassOf swa:OWLElements ;
.
<http://topbraid.org/swaowl>
  rdf:type owl:Ontology ;
  rdfs:comment "Support for rendering OWL constructs such as class expressions using SWP and SWA in particular."^^xsd:string ;
  owl:imports <http://topbraid.org/swa> ;
  owl:versionInfo "0.1.0"^^xsd:string ;
.
owl:Class
  ui:instanceView """
<swa:OWLClassLabel arg:resource=\"{= ?this }\" ui:id=\"label\" ui:priority=\"{= -9 }\"/>
"""^^ui:Literal ;
.
owl:Restriction
  ui:instanceView """
<swa:OWLRestrictionLabel arg:resource=\"{= ?this }\" ui:id=\"label\"/>
"""^^ui:Literal ;
.
