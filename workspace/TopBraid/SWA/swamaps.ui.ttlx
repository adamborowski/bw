# baseURI: http://topbraid.org/swamaps
# imports: http://topbraid.org/swa
# imports: http://www.w3.org/2003/01/geo/wgs84_pos

# c14n-version: 3
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix email: <http://topbraid.org/email#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix html: <http://uispin.org/html#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
swa:MapSearchResultsGadget
  rdf:type swa:Gadget ;
  ui:headIncludes """
<script src=\"https://maps.googleapis.com/maps/api/js?sensor=false\" type=\"text/javascript\"/>
"""^^ui:Literal ;
  ui:prototype """
<ui:group let:id=\"{= ui:uniqueId() }\">
    <div class=\"ui-layout-content\" id=\"{= ?id }\" style=\"width: 100%; height: 100%\"/>
    <swa:Subscribe arg:code=\"swa.googleMapSearchGraphs['{= ?id }'] = data;swa.updateMapMarkers('{= ?id }')\" arg:event=\"{= swa:searchEvent(?searchEvent) }\"/>
    <script>swa.initGoogleMap('{= ?id }');</script>
    <ui:loadable ui:loadId=\"{= ?id }-loadable\">
        <ui:if ui:condition=\"{= bound(?searchGraph) }\">
            <ui:setContext ui:queryGraph=\"{= ui:tempGraph }\">
                <ui:update ui:updateQuery=\"{!
                        INSERT {
                            ?s ?p ?o .
                        }
                        WHERE {
                            GRAPH ?searchGraph {
                                ?s ?p ?o .
                            } .
                        } }\"/>
                <ui:group let:search=\"{= search:theSearch() }\">
                    <ui:update ui:updateQuery=\"{!
                            INSERT {
                                ?search search:facet ?latFacet .
                                ?latFacet a search:PropertyFacet .
                                ?latFacet search:property geo:lat .
                                ?latFacet search:facetValue ?latFacetValue .
                                ?latFacetValue a search:RangeFacetValue .
                                ?latFacetValue search:min ?minLat .
                                ?latFacetValue search:max ?maxLat .
                                ?search search:facet ?longFacet .
                                ?longFacet a search:PropertyFacet .
                                ?longFacet search:property geo:long .
                                ?longFacet search:facetValue ?longFacetValue .
                                ?longFacetValue a search:RangeFacetValue .
                                ?longFacetValue search:min ?minLong .
                                ?longFacetValue search:max ?maxLong .
                            }
                            WHERE {
                                BIND (BNODE() AS ?latFacet) .
                                BIND (BNODE() AS ?latFacetValue) .
                                BIND (BNODE() AS ?longFacet) .
                                BIND (BNODE() AS ?longFacetValue) .
                            } }\"/>
                    <ui:group let:queryGraph=\"{= spl:object(?search, search:queryGraph) }\" letrs:results=\"{#
                            SELECT ?result ?totalCount
                            WHERE {
                                ( ?search 0 1000 ) search:result ( ?result ?totalCount ) .
                            } }\">
                        <ui:setContext ui:queryGraph=\"{= ?queryGraph }\">
                            <script>swa.removeGoogleMapMarkers('{= ?id }');</script>
                            <ui:forEach ui:resultSet=\"{= ?results }\">
                                <ui:group let:lat=\"{= spl:object(?result, geo:lat) }\" let:long=\"{= spl:object(?result, geo:long) }\">
                                    <ui:if ui:condition=\"{= bound(?lat) &amp;&amp; bound(?long) }\">
                                        <script>var marker = new google.maps.Marker({
  		position: new google.maps.LatLng({= ?lat },{= ?long }),
  		map: swa.googleMaps['{= ?id }'],
  		title:\"{= ui:label(?result) }\"
  		});
		swa.googleMapMarkers['{= ?id }']['{= ?result }'] = marker;
		google.maps.event.addListener(marker, 'click', function() {
			{= swa:publishEvent(?resourceSelectedEvent, CONCAT(\"'\", xsd:string(?result), \"'\")) }
  		});</script>
                                    </ui:if>
                                </ui:group>
                            </ui:forEach>
                        </ui:setContext>
                    </ui:group>
                </ui:group>
            </ui:setContext>
        </ui:if>
    </ui:loadable>
</ui:group>
"""^^ui:Literal ;
  rdfs:comment """A Map that can be used to browse the results of a given search. When the user changes the bounding box (by scrolling and zooming), a new search is executed to find the matching markers. A click on a marker will publish the resource selection event.

Note: This gadget is only officially supported if the query graph is backed by a Solr index. The required range queries would be potentially too slow for a pure RDF store."""^^xsd:string ;
  rdfs:label "Map search results gadget"^^xsd:string ;
  rdfs:subClassOf swa:SearchResultsGadgets ;
.
<http://topbraid.org/swamaps>
  rdf:type owl:Ontology ;
  owl:imports <http://topbraid.org/swa> ;
  owl:imports <http://www.w3.org/2003/01/geo/wgs84_pos> ;
  owl:versionInfo "Created with TopBraid Composer"^^xsd:string ;
.
