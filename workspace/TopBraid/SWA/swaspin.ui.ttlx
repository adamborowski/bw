# baseURI: http://topbraid.org/swaspin
# imports: http://topbraid.org/swa

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix email: <http://topbraid.org/email#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix html: <http://uispin.org/html#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

arg:arg
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:groupId
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:mainSubject
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
arg:newTemplateType
  rdf:type rdf:Property ;
  rdfs:subPropertyOf sp:arg ;
.
spin:constraint
  swa:specialAddButtonFunctionName "swaspin.addSPINConstraintRow"^^xsd:string ;
.
swa:AddSPINConstraintDialog
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:loadId ;
      spl:valueType xsd:string ;
      rdfs:comment "The load id of the dialog."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject to add the constraint for."^^xsd:string ;
    ] ;
  ui:prototype """
<div id=\"div-{= ?loadId }\">
    <swa:ResultSetGrid arg:colWidths=\"0,250,618\" arg:hiddenColName=\"templateURI\" arg:onSelect=\"swaspin.selectedTemplateURI=data['templateURI'];\" arg:resultSet=\"{#
            SELECT ?templateURI ?Label ?Template
            WHERE {
                ?template a spl:ConstraintTemplate .
                ?template spin:body ?someBody .
                ?template spin:labelTemplate ?someLabelTemplate .
                BIND (swa:templateSummary(?template) AS ?Template) .
                BIND (xsd:string(?template) AS ?templateURI) .
                BIND (ui:label(?template) AS ?Label) .
            }
            ORDER BY (?Label) }\"/>
</div>
"""^^ui:Literal ;
  rdfs:comment "A dialog allowing the user to select a SPIN template suitable for the given subject."^^xsd:string ;
  rdfs:label "Add SPIN constraint dialog"^^xsd:string ;
  rdfs:subClassOf swa:DialogElements ;
.
swa:ArgumentEditor
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:object ;
      rdfs:comment "The value of the argument (if any)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:groupId ;
      spl:valueType xsd:string ;
      rdfs:comment "An id for all argument editors on the same widget."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:mainSubject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject holding the reference to the template call."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate to edit."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType spin:Templates ;
      rdfs:comment "The template call."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType spin:Template ;
      rdfs:comment "The spin:Template (class) being edited."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:uid ;
      spl:valueType xsd:string ;
      rdfs:comment "The uid of the editing context."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:valueType ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The value type to use"^^xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= (!bound(?valueType)) || (?valueType = rdfs:Literal) }\">
        <ui:loadable class=\"swa-dependant-argument-editor-{= ?groupId }\" ui:loadId=\"dependant-{= ?uid }-{= afn:localname(?predicate) }\">
            <ui:group let:p=\"{= COALESCE(?property, spl:object(?subject, arg:property)) }\">
                <ui:group let:range=\"{= IF(bound(?p), swa:localRangeAtClass(swa:resourceType(), ?p), xsd:string) }\">
                    <swa:ArgumentEditor arg:valueType=\"{= IF((bound(?range) &amp;&amp; (?range != rdfs:Literal)), ?range, xsd:string) }\" ui:args=\"*\"/>
                </ui:group>
            </ui:group>
        </ui:loadable>
    </ui:if>
    <ui:elseif ui:condition=\"{= swa:isDatatypeRange(?valueType) }\">
        <ui:if ui:condition=\"{= ?valueType = xsd:string }\">
            <swa:TextFieldArgumentEditor arg:width=\"100px\" ui:args=\"*\"/>
        </ui:if>
        <ui:elseif ui:condition=\"{= ?valueType = xsd:date }\">
            <swa:DateArgumentEditor ui:args=\"*\"/>
        </ui:elseif>
        <ui:else>
            <swa:TextFieldArgumentEditor arg:width=\"60px\" ui:args=\"*\"/>
        </ui:else>
    </ui:elseif>
    <ui:else>
        <swa:ResourceArgumentEditor ui:args=\"*\"/>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Argument editor"^^xsd:string ;
  rdfs:subClassOf swa:TemplateElements ;
.
swa:DateArgumentEditor
  rdf:type ui:NodeClass ;
  ui:prototype """
<ui:group>
    <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= xsd:date }\" arg:uid=\"{= ?uid }\"/>
    <input id=\"dateEditor{= ?uid }\" size=\"10\" type=\"text\" value=\"{= ?object }\"/>
    <input id=\"new-{= ?uid }\" name=\"new-{= ?uid }\" type=\"hidden\" value=\"{= ?object }\"/>
    <swa:WidgetInitializer arg:script=\"swa.initDatePicker('{= ?uid }')\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Date argument editor"^^xsd:string ;
  rdfs:subClassOf swa:ArgumentEditor ;
.
swa:Elements
  ui:headIncludes """
<ui:group>
    <link href=\"{= ui:lib() }/swa/css/swaspin.css\" rel=\"stylesheet\" type=\"text/css\"/>
    <script src=\"{= ui:lib() }/swa/js/swaspin.js\" type=\"text/javascript\"/>
</ui:group>
"""^^ui:Literal ;
.
swa:NewTemplateCallEditor
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:newTemplateType ;
      spl:valueType spin:Template ;
      rdfs:comment "The SPIN template class."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:predicate ;
      spl:valueType rdf:Property ;
      rdfs:comment "The predicate, e.g. spin:constraint."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:subject ;
      spl:valueType rdfs:Resource ;
      rdfs:comment "The subject being edited on the main form."^^xsd:string ;
    ] ;
  ui:prototype """
<ui:group let:uid=\"{= ui:uniqueId() }\">
    <table class=\"swa-object-editor-row-table\" id=\"{= ?uid }\">
        <tr>
            <td class=\"swa-object-row-main-td\">
                <swa:ObjectEditorHiddenFields ui:args=\"*\"/>
                <swa:TemplateCallEditor ui:args=\"*\"/>
            </td>
            <td class=\"swa-object-row-button-td\">
                <a class=\"swa-delete-row-button swa-icon ui-icon ui-icon-closethick\" href=\"javascript:void(0)\" onclick=\"{= ui:functionCall(&quot;swa.deleteRow&quot;, ?uid) }\"/>
            </td>
        </tr>
    </table>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:comment "Inserts a new swa:TemplateCallEditor for a new bnode of a given template class."^^xsd:string ;
  rdfs:label "New template call editor"^^xsd:string ;
  rdfs:subClassOf swa:TemplateElements ;
.
swa:ResourceArgumentEditor
  rdf:type ui:NodeClass ;
  ui:prototype """
<ui:group let:byDomain=\"{= spl:subClassOf(?template, spl:PropertyConstraintTemplates) }\">
    <swa:AutoComplete arg:class=\"swa-resource-argument-editor swa-text-field {= swa:testClass(?predicate) }\" arg:filterFunction=\"{= IF(?byDomain, swa:filterByDomain, ?none) }\" arg:filterFunctionArgument=\"{= ?mainSubject }\" arg:id=\"new-{= ?uid }\" arg:initialValue=\"{= ?object }\" arg:onSelect=\"swaspin.reloadDependingArgumentEditors(&quot;{= ?groupId }&quot;, resource)\" arg:type=\"{= ?valueType }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Resource argument editor"^^xsd:string ;
  rdfs:subClassOf swa:ArgumentEditor ;
.
swa:TemplateCallEditor
  rdf:type swa:ObjectEditorClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:newTemplateType ;
      spl:valueType spin:Template ;
      rdfs:comment "A new template type if called via Add button."^^xsd:string ;
    ] ;
  swa:objectWidgetWeight [
      rdf:type swa:WeightedExpression ;
      swa:expression [
          rdf:type sp:and ;
          sp:arg1 [
              rdf:type sp:and ;
              sp:arg1 [
                  rdf:type sp:bound ;
                  sp:arg1 [
                      sp:varName "object"^^xsd:string ;
                    ] ;
                ] ;
              sp:arg2 [
                  rdf:type sp:isBlank ;
                  sp:arg1 [
                      sp:varName "object"^^xsd:string ;
                    ] ;
                ] ;
            ] ;
          sp:arg2 [
              rdf:type spl:instanceOf ;
              sp:arg1 [
                  sp:varName "object"^^xsd:string ;
                ] ;
              sp:arg2 spin:Templates ;
            ] ;
        ] ;
      swa:weight 1 ;
    ] ;
  ui:prototype """
<table class=\"swa-template-call\" let:tcall=\"{= COALESCE(?object, IRI(CONCAT(&quot;urn:x-new-bnode:&quot;, ui:uniqueId()))) }\" let:template=\"{= COALESCE(?newTemplateType, spl:object(?object, rdf:type)) }\">
    <tr let:groupId=\"{= ui:uniqueId() }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?segment
                WHERE {
                    ?template spif:labelTemplateSegment ?segment .
                } }\">
            <ui:if ui:condition=\"{= isIRI(?segment) }\">
                <td class=\"swa-argument-editor swa-template-call-arg-segment\" let:arg=\"{= IF(bound(?object), spl:object(?object, ?segment), ?none) }\" let:uid=\"{= ui:uniqueId() }\">
                    <swa:ObjectEditorHiddenFields arg:object=\"{= ?arg }\" arg:predicate=\"{= ?segment }\" arg:subject=\"{= ?tcall }\" arg:uid=\"{= ?uid }\"/>
                    <swa:ArgumentEditor arg:groupId=\"{= ?groupId }\" arg:mainSubject=\"{= ?subject }\" arg:object=\"{= ?arg }\" arg:predicate=\"{= ?segment }\" arg:subject=\"{= ?tcall }\" arg:template=\"{= ?template }\" arg:uid=\"{= ?uid }\" arg:valueType=\"{= swa:localRangeAtClass(?template, ?segment) }\"/>
                </td>
            </ui:if>
            <ui:else>
                <td class=\"swa-template-call-text-segment swa-shifted-label\">{= ?segment }</td>
            </ui:else>
        </ui:forEach>
    </tr>
    <ui:if ui:condition=\"{= bound(?newTemplateType) }\">
        <ui:group let:id=\"{= ui:uniqueId() }\">
            <input name=\"resource-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?tcall, true) }\"/>
            <input name=\"path-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(rdf:type) }\"/>
            <input name=\"new-{= ?id }\" type=\"hidden\" value=\"{= ui:encodeNode(?newTemplateType) }\"/>
        </ui:group>
    </ui:if>
    <input name=\"new-{= ?uid }\" type=\"hidden\" value=\"{= ui:encodeNode(?tcall, true) }\"/>
</table>
"""^^ui:Literal ;
  rdfs:label "Template call editor"^^xsd:string ;
  rdfs:subClassOf swa:ObjectEditor ;
.
swa:TemplateCallViewer
  rdf:type swa:ObjectViewerClass ;
  swa:objectWidgetWeight [
      rdf:type swa:WeightedExpression ;
      swa:expression [
          rdf:type sp:and ;
          sp:arg1 [
              rdf:type sp:and ;
              sp:arg1 [
                  rdf:type sp:bound ;
                  sp:arg1 [
                      sp:varName "object"^^xsd:string ;
                    ] ;
                ] ;
              sp:arg2 [
                  rdf:type sp:isBlank ;
                  sp:arg1 [
                      sp:varName "object"^^xsd:string ;
                    ] ;
                ] ;
            ] ;
          sp:arg2 [
              rdf:type spl:instanceOf ;
              sp:arg1 [
                  sp:varName "object"^^xsd:string ;
                ] ;
              sp:arg2 spin:Templates ;
            ] ;
        ] ;
      swa:weight 1 ;
    ] ;
  ui:prototype """
<div class=\"swa-template-call\">
    <ui:forEach ui:resultSet=\"{#
            SELECT ?segment
            WHERE {
                ?object a ?template .
                ?template spif:labelTemplateSegment ?segment .
            } }\">
        <ui:if ui:condition=\"{= isIRI(?segment) }\">
            <ui:group let:arg=\"{= spl:object(?object, ?segment) }\">
                <ui:if ui:condition=\"{= bound(?arg) }\">
                    <div class=\"swa-template-call-arg-segment swa-float-left\">{= ui:label(?arg) }</div>
                </ui:if>
                <ui:else>
                    <div class=\"swa-template-call-arg-segment swa-float-left\">_</div>
                </ui:else>
            </ui:group>
        </ui:if>
        <ui:else>
            <div class=\"swa-template-call-text-segment swa-float-left\">{= ?segment }</div>
        </ui:else>
    </ui:forEach>
    <div style=\"clear: both\"/>
</div>
"""^^ui:Literal ;
  rdfs:label "Template call viewer"^^xsd:string ;
  rdfs:subClassOf swa:ObjectViewer ;
.
swa:TemplateElements
  rdf:type ui:NodeClass ;
  ui:abstract "true"^^xsd:boolean ;
  rdfs:comment "Abstract base class for elements related to SPIN templates."^^xsd:string ;
  rdfs:label "Template elements"^^xsd:string ;
  rdfs:subClassOf swa:Elements ;
.
swa:TextFieldArgumentEditor
  rdf:type ui:NodeClass ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:optional "true"^^xsd:boolean ;
      spl:predicate arg:width ;
      spl:valueType xsd:string ;
      rdfs:comment "The width of the input field."^^xsd:string ;
    ] ;
  ui:prototype """
<ui:group>
    <swa:ObjectEditorHiddenDatatypeField arg:datatype=\"{= ?valueType }\" arg:uid=\"{= ?uid }\"/>
    <input class=\"swa-text-field {= swa:testClass(?predicate) }\" name=\"new-{= ?uid }\" style=\"width: {= COALESCE(?width, &quot;80px&quot;) }\" type=\"text\" value=\"{= ?object }\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "Text field argument editor"^^xsd:string ;
  rdfs:subClassOf swa:ArgumentEditor ;
.
swa:filterByDomain
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Ask ;
      sp:where (
          [
            sp:object [
                sp:varName "domain"^^xsd:string ;
              ] ;
            sp:predicate rdfs:domain ;
            sp:subject [
                sp:varName "node"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:TriplePath ;
            sp:object [
                sp:varName "domain"^^xsd:string ;
              ] ;
            sp:path [
                rdf:type sp:ModPath ;
                sp:modMax -2 ;
                sp:modMin 0 ;
                sp:subPath rdfs:subClassOf ;
              ] ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:type ;
      spl:valueType rdfs:Class ;
      rdfs:comment "The class (must be second argument of swa:AutoComplete)."^^xsd:string ;
    ] ;
  rdfs:label "filter by domain"^^xsd:string ;
  rdfs:subClassOf swa:FilterFunctions ;
.
swa:templateSummary
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:expression [
                rdf:type sp:GroupConcat ;
                sp:expression [
                    sp:varName "str"^^xsd:string ;
                  ] ;
              ] ;
            sp:varName "result"^^xsd:string ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "segment"^^xsd:string ;
              ] ;
            sp:predicate spif:labelTemplateSegment ;
            sp:subject [
                sp:varName "template"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:if ;
                sp:arg1 [
                    rdf:type sp:isIRI ;
                    sp:arg1 [
                        sp:varName "segment"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:concat ;
                    sp:arg1 " [" ;
                    sp:arg2 [
                        rdf:type afn:localname ;
                        sp:arg1 [
                            sp:varName "segment"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg3 "] " ;
                  ] ;
                sp:arg3 [
                    sp:varName "segment"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "str"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate arg:template ;
      spl:valueType spin:Template ;
      rdfs:comment "The SPIN template to render."^^xsd:string ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "template summary"^^xsd:string ;
  rdfs:subClassOf swa:Functions ;
.
<http://topbraid.org/swaspin>
  rdf:type owl:Ontology ;
  owl:imports <http://topbraid.org/swa> ;
  owl:versionInfo "0.1.0"^^xsd:string ;
.
